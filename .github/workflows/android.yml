name: MediaVox Release CI

on:
  push:
    branches:
      - master

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      
    steps:
      - uses: actions/checkout@v4

      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Find libs.versions.toml
        id: find_libs_versions
        run: |
          find . -type f -name "libs.versions.toml" -print -quit > libs_versions_path.txt || echo "File not found"
          if [ -s libs_versions_path.txt ]; then
            echo "::set-output name=libs_versions_path::$(cat libs_versions_path.txt)"
          else
            echo "::set-output name=libs_versions_path::"
          fi
      - name: Retrieve Previous Version Code
        id: retrieve_previous_version
        run: |
          if [ -n "${{ steps.find_libs_versions.outputs.libs_versions_path }}" ]; then
            previous_version=$(awk -F "=" '/app-version-previousCode/ {print $2}' "${{ steps.find_libs_versions.outputs.libs_versions_path }}"|  tr -d '[:space:]' | tr -d '"')
            echo "::set-output name=previous_version::$previous_version"
          else
            echo "No libs.versions.toml found"
            echo "::set-output name=previous_version::0"  # Default to 0 if file not found
          fi
          
      - name: Get Current Version Code app-version-previousCode
        id: get_current_version
        run: |
          if [ -n "${{ steps.find_libs_versions.outputs.libs_versions_path }}" ]; then
            current_version=$(awk -F "=" '/app-version-versionCode/ {print $2}' "${{ steps.find_libs_versions.outputs.libs_versions_path }}" | tr -d '[:space:]' | tr -d '"')
            echo "::set-output name=current_version::$current_version"
          else
            echo "No libs.versions.toml found"
            echo "::set-output name=current_version::0"  # Default to 0 if file not found
          fi
          
      - name: Rescue Build
        run: |
          ./gradlew assembleDebug
          echo "APK_FILE=$(find app/build/outputs/apk/debug -name '*.apk')" >> $GITHUB_ENV
          export APK_FILE=$(find app/build/outputs/apk/debug -name '*.apk')
          echo "APK_FILE_NAME=$(basename $APK_FILE .apk)" >> $GITHUB_ENV
      - name: Upload Build App
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_FILE_NAME }}
          path: ${{ env.APK_FILE }}
          compression-level: 9
          
      - name: Update changelogs
        uses: Bullrich/generate-release-changelog@master
        id: Changelog
        if:  ${{ steps.retrieve_previous_version.outputs.previous_version }} != ${{ steps.get_current_version.outputs.current_version }}
        env:
          REPO: ${{ github.repository }}
          
      - name: Generate Release Build
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
         tag_name: v1.${{ steps.get_current_version.outputs.current_version }}
         release_name: ${{ github.event.repository.name }} v1.${{ steps.get_current_version.outputs.current_version }}
         body: |
            ${{ steps.Changelog.outputs.changelog }}
         draft: false
         prerelease: false
          
      - name: Upload Release APK
        id: upload_release_asset
        uses: actions/upload-release-asset@latest
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
         upload_url: ${{ steps.create_release.outputs.upload_url }}
         asset_path: ${{ env.APK_FILE }}
         asset_name:  ${{ env.APK_FILE_NAME }}.apk
         asset_content_type: application/zip
